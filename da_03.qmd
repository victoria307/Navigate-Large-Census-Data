---
title: "Working with Maps: Tigris and Geocoding"
date: "2025-06-24"
format: html
execute:
  warning: false
  message: false
  eval: false
---

## 🎯 Purpose

This page introduces you to the basics of working with geographic data in R. Specifically, you’ll learn:

1. How to use the **`tigris`** package to load map data  
2. How to work with **shapefiles** and geographic boundaries  
3. How to **geocode locations** 


## Load the map 

### Use of Tigris

[Tigris](https://cran.r-project.org/web/packages/tigris/readme/README.html) is an R package that provides shapefiles and geographic boundary data down to the census tract and block group level. It’s especially useful for city-level analysis and any project involving geographic mapping.

**🧩Example**
For example, now I want to load the map of blockgroups in the county of Blacksburg in 2022

```{r}
#set up the package
library(tigris)
library(mapview)

#load the map, with the fips code of VA and Blacksburg
va_bg <- block_groups(state = "51", county = "121", year = 2020)

#to view the map 
mapview(va_bg, aplha = 1, alpha.regions = 0.1)
```

### working with shapefiles

Some of the time, you may not be able to directly access the map by tigris. In that case, in most of the state and county website you are able to access their map in the .shp format, and you can read the file by 

```{r}
#set up the library
library(sf)

va_map <- st_read("your working directory/the file.shp")
```

## Geocode Locations

**🌍 Choosing a Geocoding API**

There are two popular options when it comes to geocoding in R:

- **🔎 Google Geocoding API**  
  - High accuracy and global coverage  
  - Requires an API key  
  - Free usage is limited — charges may apply beyond the quota

- **🆓 Tidygeocoder (OpenStreetMap/Census)**  
  - Free and open-source  
  - No API key required  
  - Great for batch geocoding and educational use  
  - Accuracy may be lower compared to Google, especially for ambiguous or incomplete addresses

> 💡 Use `tidygeocoder` for quick and cost-free geocoding. If you need higher precision or enterprise-level support, consider Google’s API.

**Using Google**
```{r}
#set up the library
library(ggmap)
library(ggplot2)

# setup the library for the google api 
 if(!requireNamespace("devtools")) install.packages("devtools")
    devtools::install_github("dkahle/ggmap", ref = "tidyup")

    register_google(key = "your api here")

geocode(paste(stop_Field_2017$location[i], "DC"), timeout = 5000, verbose = TRUE,
            source = "google", output = "more") -> result

```

**Using Tidygeocoder**
```{r}
library(tidygeocoder)

xy_hut <- geocode(
  .tbl = data.frame(address = "250 Drillfield Dr, Blacksburg, VA 24061"),
  address = address,
  method = "osm",   
  lat = latitude,
  long = longitude,
  full_results = TRUE,
  verbose = TRUE
)   

head(xy_hut)
```
